diff a/src/net/elveron/game/npc/others/GraveStone.java b/src/net/elveron/game/npc/others/GraveStone.java	(rejected hunks)
@@ -431,6 +431,146 @@
 					+ username
 					+ "</i>, friend of dwarves. Great in<br>life, glorious in death. His/Her name lives on in<br>song and story.";
 		}
+<<<<<<< HEAD
 		return "Cabbage - danny M";
+=======
+		return "Cabbage - Pax M";
+	}
+
+	/*
+	 * the final items after swaping slots return keptItems, dropedItems as we
+	 * reset inv and equipment all others will just disapear
+	 */
+	public static Item[][] getItemsKeptOnDeath(Player player, Integer[][] slots) {
+		ArrayList<Item> droppedItems = new ArrayList<Item>();
+		ArrayList<Item> keptItems = new ArrayList<Item>();
+		for (int i : slots[0]) { // items kept on death
+			Item item = i >= (BodyDefinitions.getEquipmentContainerSize() + 1) ? player
+					.getInventory().getItem(
+							i
+									- (BodyDefinitions
+											.getEquipmentContainerSize() + 1))
+					: player.getEquipment().getItem(i - 1);
+			if (item == null) // shouldn't
+				continue;
+			item = new Item(item.getId(), item.getAmount());
+			if (item.getAmount() > 1) {
+				droppedItems.add(new Item(item.getId(), item.getAmount() - 1));
+				item.setAmount(1);
+			}
+			keptItems.add(item);
+		}
+		for (int i : slots[1]) { // items droped on death
+			Item item = i >= (BodyDefinitions.getEquipmentContainerSize() + 1) ? player
+					.getInventory().getItem(
+							i
+									- (BodyDefinitions
+											.getEquipmentContainerSize() + 1))
+					: player.getEquipment().getItem(i - 1);
+			if (item == null) // shouldnt
+				continue;
+			item = new Item(item.getId(), item.getAmount());
+			droppedItems.add(item);
+		}
+		for (int i : slots[2]) { // items protected by default
+			Item item = i >= (BodyDefinitions.getEquipmentContainerSize() + 1) ? player
+					.getInventory().getItem(
+							i
+									- (BodyDefinitions
+											.getEquipmentContainerSize() + 1))
+					: player.getEquipment().getItem(i - 1);
+			if (item == null) // shouldnt
+				continue;
+			item = new Item(item.getId(), item.getAmount());
+			keptItems.add(item);
+		}
+		return new Item[][] { keptItems.toArray(new Item[keptItems.size()]),
+				droppedItems.toArray(new Item[droppedItems.size()]) };
+
+	}
+
+	/*
+	 * return arrays: items kept on death by default, items dropped on death by
+	 * default, items protected by default, items lost by default
+	 */
+	public static Integer[][] getItemSlotsKeptOnDeath(final Player player,
+			boolean atWilderness, boolean skulled, boolean protectPrayer) {
+		ArrayList<Integer> droppedItems = new ArrayList<Integer>();
+		ArrayList<Integer> protectedItems = atWilderness ? null
+				: new ArrayList<Integer>();
+		ArrayList<Integer> lostItems = new ArrayList<Integer>();
+		for (int i = 1; i < 46; i++) {
+			Item item = i >= (BodyDefinitions.getEquipmentContainerSize() + 1) ? player
+					.getInventory().getItem(
+							i
+									- (BodyDefinitions
+											.getEquipmentContainerSize() + 1))
+					: player.getEquipment().getItem(i - 1);
+			if (item == null)
+				continue;
+			int stageOnDeath = item.getDefinitions().getStageOnDeath();
+			if (!atWilderness && stageOnDeath == 1)
+				protectedItems.add(i);
+			else if (stageOnDeath == -1)
+				lostItems.add(i);
+			else
+				droppedItems.add(i);
+		}
+		int keptAmount = skulled ? 0 : 3;
+		if (protectPrayer)
+			keptAmount++;
+		if (droppedItems.size() < keptAmount)
+			keptAmount = droppedItems.size();
+		Collections.sort(droppedItems, new Comparator<Integer>() {
+			@Override
+			public int compare(Integer o1, Integer o2) {
+				Item i1 = o1 >= (BodyDefinitions.getEquipmentContainerSize() + 1) ? player
+						.getInventory()
+						.getItem(
+								o1
+										- (BodyDefinitions
+												.getEquipmentContainerSize() + 1))
+						: player.getEquipment().getItem(o1 - 1);
+				Item i2 = o2 >= (BodyDefinitions.getEquipmentContainerSize() + 1) ? player
+						.getInventory()
+						.getItem(
+								o2
+										- (BodyDefinitions
+												.getEquipmentContainerSize() + 1))
+						: player.getEquipment().getItem(o2 - 1);
+				int price1 = i1 == null ? 0
+						: Settings.USE_GE_PRICES_FOR_ITEMS_KEPT_ON_DEATH ? GrandExchange
+								.getPrice(i1.getId())
+								: i1.getDefinitions().value;
+				int price2 = i2 == null ? 0
+						: Settings.USE_GE_PRICES_FOR_ITEMS_KEPT_ON_DEATH ? GrandExchange
+								.getPrice(i2.getId())
+								: i2.getDefinitions().value;
+				if (price1 > price2)
+					return -1;
+				if (price1 < price2)
+					return 1;
+				return 0;
+			}
+
+		});
+		Integer[] keptItems = new Integer[keptAmount];
+		for (int i = 0; i < keptAmount; i++)
+			keptItems[i] = droppedItems.remove(0);
+		return new Integer[][] {
+				keptItems,
+				droppedItems.toArray(new Integer[droppedItems.size()]),
+				atWilderness ? new Integer[0] : protectedItems
+						.toArray(new Integer[protectedItems.size()]),
+				atWilderness ? new Integer[0] : lostItems
+						.toArray(new Integer[lostItems.size()]) };
+
+	}
+
+	public static int getNPCId(int currentGrave) {
+		if (currentGrave == 13)
+			return 13296;
+		return 6565 + (currentGrave * 3);
+>>>>>>> parent of 4c3089f... massive code cleanup
 	}
 }
\ No newline at end of file
